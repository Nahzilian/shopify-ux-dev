[{"C:\\Users\\ducng\\Documents\\Github\\shopify-ux-dev\\movie-nomination\\src\\index.js":"1","C:\\Users\\ducng\\Documents\\Github\\shopify-ux-dev\\movie-nomination\\src\\App.js":"2","C:\\Users\\ducng\\Documents\\Github\\shopify-ux-dev\\movie-nomination\\src\\reportWebVitals.js":"3","C:\\Users\\ducng\\Documents\\Github\\shopify-ux-dev\\movie-nomination\\src\\Components\\Homepage.jsx":"4"},{"size":500,"mtime":1608319967312,"results":"5","hashOfConfig":"6"},{"size":263,"mtime":1608567717751,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":12460,"mtime":1608565699018,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1jt3izj",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\Users\\ducng\\Documents\\Github\\shopify-ux-dev\\movie-nomination\\src\\index.js",[],["20","21"],"C:\\Users\\ducng\\Documents\\Github\\shopify-ux-dev\\movie-nomination\\src\\App.js",[],"C:\\Users\\ducng\\Documents\\Github\\shopify-ux-dev\\movie-nomination\\src\\reportWebVitals.js",[],"C:\\Users\\ducng\\Documents\\Github\\shopify-ux-dev\\movie-nomination\\src\\Components\\Homepage.jsx",["22"],"import React, { useState,useEffect } from 'react';\r\nimport axios from 'axios'\r\nimport FadeIn from 'react-fade-in'\r\nimport { ReactComponent as Award } from './assets/award.svg'\r\nimport { ReactComponent as EmptyClip } from './assets/clip.svg'\r\nimport { ReactComponent as Typing } from './assets/typing.svg'\r\nconst baseAPI = `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_API_KEY}&s=`\r\n\r\n\r\nfunction Card(props, recall, type, nomList) {\r\n    var paramCall;\r\n    if (type === \"nominate\") {\r\n        paramCall = props\r\n    } else {\r\n        paramCall = props.imdbID\r\n    }\r\n    var listOfimdbID = nomList.map(x => x.imdbID);\r\n    var nominated = listOfimdbID.includes(props.imdbID) ? <div className = 'nominated-typo'>Nominated</div> : \"Nominate\";\r\n    if (props.Poster === \"N/A\")\r\n        return (\r\n            <div className=\"col-6\">\r\n                <FadeIn>\r\n                    <div className=\"card text-white bg-dark mb-3\" onClick={() => recall(paramCall)}>\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{props.Title} - ({props.Year})</h5>\r\n                        </div>\r\n                        <div className={type === \"nominate\" ? \"content\" : \"remove-nominate\"}>\r\n                            <div class=\"text\">\r\n                                {type === \"nominate\" ? nominated : \"Remove\"}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </FadeIn>\r\n            </div>\r\n        )\r\n    return (\r\n        <div className=\"col-6\">\r\n            <FadeIn>\r\n                <div className=\"card text-white bg-dark mb-3\" onClick={() => recall(paramCall)} style = {{backgroundImage:`url(${props.Poster})`}}>\r\n                    <div className={type === \"nominate\" ? \"content\" : \"remove-nominate\"}>\r\n                        <div class=\"text\">\r\n                            {props.Title}<br />\r\n                        ({props.Year})<br />\r\n                            {type === \"nominate\" ? nominated : \"Remove\"}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </FadeIn>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function Homepage() {\r\n    const [userQuery, setUserQuery] = useState(null);\r\n    const [data, setQueryData] = useState(null);\r\n    const [nominatedList, setNominatedList] = useState(JSON.parse(localStorage.getItem(\"nominatedList\")) || []);\r\n    const [prevQuery, setPrevQuery] = useState(null);\r\n    const [dataCount, setDataCount] = useState(0);\r\n    const pageLimit = 6;\r\n    const [pageIndex, setPageIndex] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentData, setCurrentData] = useState([]);\r\n    const [currentSelectedPage, setCurSelectedPage] = useState(JSON.parse(localStorage.getItem(\"currentSelectedPage\")) || 1);\r\n    const [currentSelectedData, setCurSelectedData] = useState(JSON.parse(localStorage.getItem(\"currentSelectedData\")) || []);\r\n    const [selectedPageIndex, setSelectedPageIndex] = useState(JSON.parse(localStorage.getItem(\"selectedPageIndex\")) || [1]);\r\n    const [isSearched, setIsSearched] = useState(false);\r\n    \r\n    window.onbeforeunload = () => {\r\n        localStorage.setItem(\"currentSelectedData\", JSON.stringify(currentSelectedData));\r\n        localStorage.setItem(\"selectedPageIndex\", JSON.stringify(selectedPageIndex));\r\n        localStorage.setItem(\"nominatedList\", JSON.stringify(nominatedList));\r\n        localStorage.setItem(\"currentSelectedPage\", JSON.stringify(currentSelectedPage));\r\n    }\r\n    useEffect(() => {\r\n        if(nominatedList.length > 0){\r\n            setIsSearched(true);\r\n        }\r\n    },[])\r\n    const nominate = (data) => {\r\n        var compareElement = data.imdbID;\r\n        var listOfimdbID = nominatedList.map(x => x.imdbID);\r\n        if (!listOfimdbID.includes(compareElement)) {\r\n            var temp = nominatedList.concat([data]);\r\n            var maxPage;\r\n            if (temp.length % pageLimit === 0) {\r\n                maxPage = Math.floor(temp.length / pageLimit);\r\n            } else {\r\n                maxPage = Math.floor(temp.length / pageLimit) + 1;\r\n            }\r\n            var index;\r\n            var lastElement = selectedPageIndex[selectedPageIndex.length - 1]\r\n            if (lastElement === maxPage) {\r\n                index = lastElement\r\n            } else if (lastElement < maxPage) {\r\n                index = maxPage;\r\n                setSelectedPageIndex(selectedPageIndex.concat(index));\r\n            }\r\n            setNominatedList(temp);\r\n            setCurSelectedData(temp.slice((index - 1) * pageLimit, index * pageLimit));\r\n            setCurSelectedPage(index)\r\n        }\r\n    }\r\n    const removeNominate = (imdbID) => {\r\n        var temp = nominatedList.filter(x => !(x.imdbID === imdbID));\r\n        setNominatedList(temp);\r\n        var maxPage;\r\n        if (temp.length % pageLimit === 0) {\r\n            selectedPageIndex.pop();\r\n            if (selectedPageIndex.length === 0) {\r\n                setSelectedPageIndex([1]);\r\n            }\r\n            maxPage = Math.floor(temp.length / pageLimit);\r\n            setCurSelectedPage(maxPage)\r\n            setCurSelectedData(temp.slice((maxPage - 1) * pageLimit, maxPage * pageLimit));\r\n        } else {\r\n            maxPage = Math.floor(temp.length / pageLimit) + 1;\r\n            var lastElement = selectedPageIndex[selectedPageIndex.length - 1];\r\n            if (lastElement > maxPage) {\r\n                selectedPageIndex.pop()\r\n                if (selectedPageIndex.length === 0) {\r\n                    setSelectedPageIndex([1]);\r\n                }\r\n            }\r\n            setCurSelectedData(temp.slice((currentSelectedPage - 1) * pageLimit, currentSelectedPage * pageLimit));\r\n        }\r\n\r\n    }\r\n\r\n    const changeSelectedPage = (index) => {\r\n        setCurSelectedPage(index);\r\n        setCurSelectedData(nominatedList.slice((index - 1) * pageLimit, index * pageLimit))\r\n    }\r\n\r\n    const apiCall = (query) => {\r\n        axios.get(baseAPI + query)\r\n            .then((res) => {\r\n                const len = res.data.Search.length\r\n                setDataCount(len);\r\n                var maxPage = Math.floor(len / pageLimit) + 2;\r\n                var temp = []\r\n                var indexData = []\r\n\r\n                for (var i = 1; i < maxPage; i++) {\r\n                    temp.push(i);\r\n                    indexData.push(res.data.Search.slice((i - 1) * pageLimit, i * pageLimit));\r\n                }\r\n                setPageIndex(temp);\r\n                setQueryData(indexData)\r\n                setCurrentData(indexData[0])\r\n                setIsSearched(true)\r\n            }).catch((err) => console.error(err))\r\n    }\r\n\r\n    const queryFormat = (query) => {\r\n        return query.split(\" \").join(\"+\");\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        if (userQuery && !(userQuery === \"\")) {\r\n            apiCall(queryFormat(userQuery))\r\n            setPrevQuery(userQuery)\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e) => {\r\n        setUserQuery(e.target.value);\r\n    }\r\n\r\n    const changePage = (index) => {\r\n        setCurrentPage(index);\r\n        setCurrentData(data[index - 1]);\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <FadeIn>\r\n                <br />\r\n                <div className=\"col\">\r\n                    <div className=\"row search-box\">\r\n                        <div className = \"title underline\">\r\n                            <h1>The Shoppies</h1>\r\n                        </div>\r\n                        <br />\r\n                        <form onSubmit={submitHandler}>\r\n                            <lable><strong>Movie title</strong></lable>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-10\">\r\n                                    <input className=\"effect-9\" type=\"text\" placeholder=\"Look for movie ...\" onChange={(e) => onChangeHandler(e)} />\r\n                                    <span className=\"focus-border\">\r\n                                        <i></i>\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"col-2\">\r\n                                    <button className=\"btn btn-info\" type=\"submit\">\r\n                                        <span><i className=\"fas fa-search\"></i> Search</span>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n\r\n                    <br />\r\n                    {isSearched ?\r\n                        <div className=\"search-wrapper row\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-6 left-board\">\r\n                                    {prevQuery ? <div><h4>Found {dataCount} results for <strong>\"{prevQuery}\"</strong></h4></div> : null}\r\n                                    <div className=\"results\">\r\n                                        <div className=\"paging\">\r\n                                            {pageIndex.length > 0 ?\r\n                                                pageIndex.map(x => <div className=\"page-index\" onClick={() => changePage(x)}>{parseInt(x) === parseInt(currentPage) ? <u className=\"selected\">{x}</u> : x}</div>) : null}\r\n                                        </div>\r\n                                        {currentData.length > 0 ? <div className=\"row\">{currentData.map(x => Card(x, nominate, \"nominate\", nominatedList))}</div> :\r\n                                            <div className = \"col typing\">\r\n                                                <div className = \"typing-svg\">\r\n                                                    <Typing />\r\n                                                    <p>Looking for movies!</p>\r\n                                                </div>\r\n                                            </div>}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-6 result-wrapper\">\r\n                                    <div><h4>Nominations</h4></div>\r\n                                    <div className=\"paging\">\r\n                                        {selectedPageIndex.length > 0 ?\r\n                                            selectedPageIndex.map(x => <div className=\"page-index\" onClick={() => changeSelectedPage(x)}>{parseInt(x) === parseInt(currentSelectedPage) ? <u className=\"selected\">{x}</u> : x}</div>) : null}\r\n                                    </div>\r\n                                    {currentSelectedData.length > 0 ? <div className=\"row\">{currentSelectedData.map(x => Card(x, removeNominate, \"remove\", nominatedList))}</div> :\r\n                                        <div className = \"col empty-clip\">\r\n                                            <div className = \"clip-board\">\r\n                                                <EmptyClip />\r\n                                                <p>Huh, your nomination list looks empty...</p>\r\n                                            </div>\r\n                                        </div>}\r\n                                </div>\r\n                            </div>\r\n                        </div> :\r\n                        <div className=\"main-page row\">\r\n                            <div className=\"col-6\">\r\n                                <Award />\r\n                            </div>\r\n                            <div className=\"col-6\">\r\n                                <h2 className = \"title underline\">Movie nominations</h2>\r\n                                <br/>\r\n                                <p>Love watching movies? Want to nominate your favorite movies? The Shoppies's movie nomination a solution for you!</p>\r\n                                <ul>\r\n                                    <li>Can't keep track of your nominees? We got you covered!</li>\r\n                                    <li>Look up for your favorite movies within seconds!</li>\r\n                                    <li>Save your nominees for future reference!</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n\r\n                    }\r\n                </div>\r\n            </FadeIn>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":78,"column":7,"nodeType":"29","endLine":78,"endColumn":9,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'nominatedList.length'. Either include it or remove the dependency array.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [nominatedList.length]",{"range":"36","text":"37"},[3689,3691],"[nominatedList.length]"]